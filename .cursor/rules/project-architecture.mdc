---
description: Project architecture and structure guidelines for the diff-view Electron application
globs: *.ts,*.tsx,*.js,*.jsx,*.json
---

# Project Architecture Guide

## Application Structure
This is an Electron application with a clear separation of concerns:

- **[src/main.ts](mdc:src/main.ts)** - Main process entry point
- **[src/renderer.tsx](mdc:src/renderer.tsx)** - Renderer process entry point
- **[src/preload.ts](mdc:src/preload.ts)** - Preload script for IPC communication
- **[src/index.css](mdc:index.css)** - Global styles and Tailwind imports

## Technology Stack
- **Framework**: Electron with Vite for fast development
- **Frontend**: React with TypeScript
- **Styling**: Tailwind CSS with custom design tokens
- **Build Tools**: Vite for main, preload, and renderer processes
- **Testing**: Playwright for E2E, Vitest for unit tests
- **Configuration**: Forge for Electron packaging

## Architecture Principles
1. **Security**: Preload script acts as secure bridge between main and renderer
2. **Performance**: Vite provides fast HMR and optimized builds
3. **Type Safety**: Full TypeScript coverage with strict settings
4. **Testing**: Comprehensive test coverage across all layers

## Key Files Reference
- **[vite.main.config.ts](mdc:vite.main.config.ts)** - Main process build configuration
- **[vite.renderer.config.ts](mdc:vite.renderer.config.ts)** - Renderer process build configuration
- **[vite.preload.config.ts](mdc:vite.preload.config.ts)** - Preload script build configuration
- **[playwright.config.ts](mdc:playwright.config.ts)** - E2E testing configuration
- **[tailwind.config.js](mdc:tailwind.config.js)** - Styling configuration