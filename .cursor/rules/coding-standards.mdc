---
description: TypeScript and coding standards for maintainable, type-safe code
globs: *.ts,*.tsx,*.js,*.jsx
---

# Coding Standards & TypeScript Best Practices

## TypeScript Philosophy
- **Prioritize code readability over performance**
- **Only fix TypeScript errors - never alter behavior**
- **Prefer Indexed Access of original types** rather than generic `string` or `number`

## TypeScript Patterns

### Indexed Access Types (Preferred)
```typescript
// ✅ Good - Use indexed access for type safety
export type ShowAppSettingResponse =
  operations['showAppSetting']['responses'][200]['content']['application/json']
```

### Generic Types (Avoid when possible)
```typescript
// ❌ Avoid generic string/number types when indexed access is available
type SomeId = string
type Count = number
```

## Code Quality Standards

### Functions and Classes
- **Always add descriptive docstrings** to all function and class declarations
- Use JSDoc format for documentation
- Include parameter types, return types, and meaningful descriptions

### Error Handling
- Use proper TypeScript error types
- Avoid `any` type - prefer specific union types or indexed access
- Handle all possible error cases explicitly

### Imports and Exports
- Use named imports over default imports when possible
- Group imports logically (external libraries, internal modules, types)
- Avoid wildcard imports (`import * as`)

## Code Organization
- **One responsibility per file** when possible
- **Clear, descriptive file names** that match export names
- **Consistent file structure** across the codebase

## Type Safety Best Practices
- **Strict null checks** enabled
- **No implicit any** allowed
- **Unused variables** must be prefixed with underscore or explicitly ignored
- **Consistent naming** - camelCase for variables/functions, PascalCase for types/interfaces