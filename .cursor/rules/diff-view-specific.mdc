---
description: Project-specific patterns and requirements for the diff-view application
globs: *.ts,*.tsx,*.js,*.jsx
---

# Diff-View Application Specific Guidelines

## Application Purpose
This is a **diff-view** Electron application designed for viewing and comparing file differences with a modern, accessible interface.

## Core Technologies & Architecture

### Electron Architecture
- **Main Process**: Handles system integration, file operations, window management
- **Renderer Process**: React-based UI for displaying diff content
- **Preload Script**: Secure communication bridge between main and renderer processes

### Key Dependencies
- **React & TypeScript**: Modern frontend framework with type safety
- **Vite**: Fast build tool optimized for Electron development
- **Tailwind CSS**: Utility-first CSS framework for styling
- **Playwright**: End-to-end testing framework

## File Structure Patterns

### Source Organization
```
src/
├── main.ts           # Main process entry point
├── renderer.tsx      # Renderer process entry point
├── preload.ts        # IPC communication bridge
├── index.css         # Global styles and Tailwind imports
└── components/       # React components (when added)
```

### Configuration Files
- **[vite.main.config.ts](mdc:vite.main.config.ts)** - Main process bundling
- **[vite.renderer.config.ts](mdc:vite.renderer.config.ts)** - Renderer process bundling
- **[vite.preload.config.ts](mdc:vite.preload.config.ts)** - Preload script bundling
- **[tailwind.config.js](mdc:tailwind.config.js)** - Styling configuration
- **[playwright.config.ts](mdc:playwright.config.ts)** - E2E testing setup

## Development Patterns

### IPC Communication
- **Context Isolation**: Always use preload script for secure IPC
- **Type Safety**: Define TypeScript interfaces for all IPC channels
- **Error Handling**: Proper error handling for IPC failures

### File Operations
- **Diff Processing**: Handle various diff formats (unified, git, etc.)
- **Large File Support**: Efficient handling of large files
- **Syntax Highlighting**: Code syntax highlighting for different file types

## UI/UX Requirements

### Diff Display
- **Side-by-side View**: Traditional diff layout with old/new versions
- **Unified View**: Compact single-pane diff display
- **Syntax Highlighting**: Proper syntax coloring for code files
- **Line Numbers**: Clear line numbering for reference

### Navigation & Interaction
- **Keyboard Shortcuts**: Full keyboard navigation support
- **Search Functionality**: Find specific changes or text
- **Zoom Controls**: Adjustable text size for accessibility
- **Theme Support**: Light and dark mode compatibility

## Performance Considerations

### Memory Management
- **Lazy Loading**: Load diff content on demand
- **Virtual Scrolling**: Handle large files efficiently
- **Garbage Collection**: Proper cleanup of resources

### Bundle Optimization
- **Code Splitting**: Separate vendor and application code
- **Tree Shaking**: Remove unused code paths
- **Asset Optimization**: Optimize images and fonts

## Testing Strategy

### E2E Test Scenarios
- **Application Launch**: Verify app starts correctly
- **File Loading**: Test diff file opening and parsing
- **View Switching**: Test between different diff view modes
- **User Interactions**: Test all user interface elements

### Unit Test Coverage
- **Diff Parsing**: Test diff format parsing logic
- **Component Logic**: Test React component behavior
- **Utility Functions**: Test helper functions and utilities

## Accessibility Requirements

### WCAG Compliance
- **Keyboard Navigation**: Full keyboard accessibility
- **Screen Reader Support**: Proper ARIA labels and roles
- **Color Contrast**: WCAG AA contrast ratios
- **Focus Management**: Clear focus indicators

### Motor Accessibility
- **Large Touch Targets**: Minimum 44px touch areas
- **Gesture Support**: Support for assistive touch gestures
- **Voice Control**: Compatibility with voice control software

## Future Enhancements

### Planned Features
- **Plugin System**: Extensible architecture for format support
- **Theme Editor**: Custom theme creation tools
- **Export Options**: Multiple export formats (PDF, HTML, etc.)
- **Collaboration**: Real-time collaborative editing

### Architecture Extensibility
- **Modular Design**: Easy to add new diff formats
- **Plugin API**: Well-defined interfaces for extensions
- **Configuration System**: Flexible user preferences